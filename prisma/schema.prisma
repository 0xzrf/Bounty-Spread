// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String     @unique
  publicKey String     @unique
  bounties  Bounties[]
  grants    Grants[]
  projects  Projects[]

  @@unique([publicKey, email])
}

model Bounties {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  sumbissions BountySubmissions[]
  createdAt   DateTime            @default(now())
  isActive    Boolean             @default(true)
  Interval    DateTime
  hostRel     Host                @relation(fields: [id], references: [id])
  bountyInput InputTypes?
}

model BountySubmissions {
  id          Int          @id @default(autoincrement())
  userid      Int
  userRel     User         @relation(fields: [userid], references: [id])
  bountyInput BountyInput?
  bountyRel   Bounties     @relation(fields: [id], references: [id])
}

model BountyInput {
  id            Int               @id @default(autoincrement())
  name          String
  otherInfo     String
  amount        Int
  question      Questions[]
  submissionRel BountySubmissions @relation(fields: [id], references: [id])
}

model Questions {
  id           Int           @id @default(autoincrement())
  question     String
  answer       String
  grantId      Int           @unique @default(autoincrement())
  bountyId     Int           @unique @default(autoincrement())
  projectId    Int           @unique @default(autoincrement())
  bountyInput  BountyInput   @relation(fields: [bountyId], references: [id])
  grantInput   GrantInput    @relation(fields: [grantId], references: [id])
  projectInput ProjectInputs @relation(fields: [projectId], references: [id])
}

model Grants {
  id          Int                @id @default(autoincrement())
  name        String
  createdAt   DateTime           @default(now())
  submissions GrantSubmisisons[]
  isActive    Boolean            @default(true)
  Interval    DateTime
  grantHost   Host               @relation(fields: [id], references: [id])
  grant       InputTypes?
}

model InputTypes {
  id        Int      @id @default(autoincrement())
  question  String
  type      String
  grantId   Int      @unique @default(autoincrement())
  bountyId  Int      @unique @default(autoincrement())
  projectId Int      @unique @default(autoincrement())
  grant     Grants   @relation(fields: [grantId], references: [id])
  project   Projects @relation(fields: [projectId], references: [id])
  bounty    Bounties @relation(fields: [bountyId], references: [id])
}

model GrantSubmisisons {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  grantInfo GrantInput?
  grant     Grants      @relation(fields: [id], references: [id])
}

model GrantInput {
  id              Int              @id @default(autoincrement())
  name            String
  otherInfo       String
  projDescription String
  amount          Int
  question        Questions?
  grantSub        GrantSubmisisons @relation(fields: [id], references: [id])
}

model Projects {
  id          Int                  @id @default(autoincrement())
  name        String
  createdAt   DateTime             @default(now())
  isActive    Boolean              @default(true)
  Interval    DateTime
  submissions ProjectSubmissions[]
  host        Host                 @relation(fields: [id], references: [id])
  projInput   InputTypes?
}

model ProjectSubmissions {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  projectInputs ProjectInputs?
  project       Projects       @relation(fields: [id], references: [id])
}

model ProjectInputs {
  id       Int                @id @default(autoincrement())
  name     String
  amount   Int
  projSub  ProjectSubmissions @relation(fields: [id], references: [id])
  question Questions?
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  username           String               @unique
  publicKey          String               @unique
  bountySubmission   BountySubmissions[]
  grantSubmissions   GrantSubmisisons[]
  projectSubmissions ProjectSubmissions[]

  @@unique([publicKey, email])
}
